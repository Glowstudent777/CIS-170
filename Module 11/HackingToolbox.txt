// Author: Glowstudent
// Program: Hacking Toolbox

Declare Integer input

Module displayHeader()
    Display "  _  _         _   _             _____         _ _"
    Display " | || |__ _ __| |_(_)_ _  __ _  |_   _|__  ___| | |__  _____ __"
    Display " | __ / _` / _| / / | ' \/ _` |   | |/ _ \/ _ \ | '_ \/ _ \ \ /"
    Display " |_||_\__,_\__|_\_\_|_||_\__, |   |_|\___/\___/_|_.__/\___/_\_\"
    Display "                        |___/"
End Module

Module displayMainMenu(String Ref selection)
    Display " == Main Menu =="
    Display " 1.  Password Cracking"
    Display " 2.  Cryptography"
    Display " 99. Quit Program"
    Display "Choose option (1-3 or 99): "
    Input selection
End Module

Module displayPasswordCrackingMenu(String Ref selection)
    Display " == Password Cracking Menu =="
    Display " 1.  Generate a wordlist"
    Display " 99. Return to Main Menu"
    Display "Choose option (1 or 99): "
    Input selection
End Module

Module displayCryptographyMenu(String Ref selection)
    Display " == Cryptography Menu =="
    Display " 1.  Decode ROT 13"
    Display " 2.  Encode ROT 13"
    Display " 99. Return to Main Menu"
    Display "Choose option (1-2 or 99): "
    Input selection
End Module

Module generatePasswordList()
    Declare String fileName
    Declare String pwdPrefix
    Declare Integer index
    Declare String password
    Declare String prefixNum
    
    Display "Enter filename to store passwords to: "
    Input fileName

    While length(fileName) == 0
        Display "Filename must not be empty! Enter filename: "
        Input fileName
    End While

    Declare OutputFile outFile

    Display "Enter prefix for password: "
    Input pwdPrefix // Allowed to be empty to just display 0000, 0001, etc

    Open outFile fileName

    For index = 0 To 9999
        Select length(integerToString(index))
            Case 1:
                Set prefixNum = append("000", index)
            Case 2:
                Set prefixNum = append("00", index)
            Case 3:
                Set prefixNum = append("0", index)
            Case 4:
                Set prefixNum = index
        End Select

        If length(pwdPrefix) > 0 Then
            Set password = append(pwdPrefix, prefixNum)
        Else
            Set password = prefixNum
        End If

        Write outFile password
    End For

    Close outFile

    Display "Passwords saved to: " + fileName
End Module

Function String rot13(String string)
    Declare String decoded[26] = "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", 
                                 "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"

    Declare String encoded[26] = "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
                                 "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"

    Declare String shifted = ""
    Declare Boolean isUpperCase
    Declare Boolean found = False

    For i = 0 To length(string) - 1
            Set found = False
            For j = 0 To length(decoded) - 1
                If isUpper(string[i]) Then
                    Set isUpperCase = True    
                Else     
                    Set isUpperCase = False   
                End If
                If decoded[j] == toLower(string[i]) Then
                    Set found = True
                    If isUpperCase Then
                        Set shifted = append(shifted, toUpper(encoded[j]))
                    Else
                        Set shifted = append(shifted, encoded[j])
                    End If
                End If
            End For
            If found == False Then
                Set shifted = apend(shifted, string[i])
            End If
    End For
    Return shifted
End Function

Module encodeROT13()
    Declare String message
    Declare String result
    Declare Integer index

    Display "Enter message to encode: "
    Input message
    While length(message) == 0
        Display "Message must not be empty! Enter message to encode: "
        Input message
    End While

    Set result = rot13(message)

    Display "Your encoded message is: " + result
End Module

Module decodeROT13()
    Declare String message
    Declare String result
    Declare Integer index

    Display "Enter message to decode: "
    Input message
    While length(message) == 0
        Display "Message must not be empty! Enter message to decode: "
        Input message
    End While

    Set result = rot13(message)

    Display "Your decoded message is: " + result
End Module

Module main()
    Declare String selection
    Declare Integer selectedOption = 0

    Call displayHeader()
    Call displayMainMenu(selection)

    While selectedOption < 1 OR selectedOption > 2 AND selectedOption != 99
        If isInteger(selection) Then
            Set selectedOption = stringToInteger(selection)

            If selectedOption < 1 OR selectedOption > 2 AND selectedOption != 99 Then
                Display "Invalid Selection! Choose option (1-3 or 99): "
                Input selection
            End If
        Else
            Display "Invalid Selection! Choose option (1-3 or 99): "
            Input selection
        End If
    End While

    Select selectedOption
        Case 1:
            Set selection = 0
            Call displayPasswordCrackingMenu(selection)

            While selectedOption != 1 AND selectedOption != 99
                If isInteger(selection) Then
                    Set selectedOption = stringToInteger(selection)

                    If selectedOption != 1 AND selectedOption != 99 Then
                        Display "Invalid Selection! Choose option (1 or 99): "
                        Input selection
                    End If
                Else
                    Display "Invalid Selection! Choose option (1 or 99): "
                    Input selection
                End If
            End While

            Select selectedOption
                Case 1:
                    Call generatePasswordList()
                Case 99:
                    Call main()
            End Select
        Case 2:
            Set selection = 0
            Call displayCryptographyMenu(selection)

            While selectedOption < 1 OR selectedOption > 2 AND selectedOption != 99
                If isInteger(selection) Then
                    Set selectedOption = stringToInteger(selection)

                    If selectedOption < 1 OR selectedOption > 2 AND selectedOption != 99 Then
                        Display "Invalid Selection! Choose option (1-2 or 99): "
                        Input selection
                    End If
                Else
                    Display "Invalid Selection! Choose option (1-2 or 99): "
                    Input selection
                End If
            End While

            Select selectedOption
                Case 1:
                    Call encodeROT13()
                Case 2:
                    Call decodeROT13()
                Case 99:
                    Call main()
            End Select
        Case 99:
            Display "Goodbye!"
    End Select

End Module